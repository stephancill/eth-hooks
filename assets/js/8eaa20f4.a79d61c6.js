"use strict";(self.webpackChunketh_hooks=self.webpackChunketh_hooks||[]).push([[4106],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return k}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(a),k=r,h=c["".concat(d,".").concat(k)]||c[k]||m[k]||l;return a?n.createElement(h,i(i({ref:t},s),{},{components:a})):n.createElement(h,i({ref:t},s))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5523:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],o={},d=void 0,p={unversionedId:"api/modules/Models",id:"api/modules/Models",title:"Models",description:"eth-hooks - v4.0.30 / Models",source:"@site/docs/api/modules/Models.md",sourceDirName:"api/modules",slug:"/api/modules/Models",permalink:"/eth-hooks/docs/api/modules/Models",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/modules/Models.md",tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"Hooks",permalink:"/eth-hooks/docs/api/modules/Hooks"},next:{title:"TestUtils",permalink:"/eth-hooks/docs/api/modules/TestUtils"}},s=[{value:"Table of contents",id:"table-of-contents",children:[{value:"Variables",id:"variables",children:[],level:3},{value:"EthersContext Type aliases",id:"etherscontext-type-aliases",children:[],level:3},{value:"Models Type aliases",id:"models-type-aliases",children:[],level:3},{value:"Misc Type aliases",id:"misc-type-aliases",children:[],level:3},{value:"Type Definition Type aliases",id:"type-definition-type-aliases",children:[],level:3},{value:"EthersContext Interfaces",id:"etherscontext-interfaces",children:[],level:3},{value:"Functions",id:"functions",children:[],level:3}],level:2},{value:"Variables",id:"variables-1",children:[{value:"const_web3DialogClosedByUser",id:"const_web3dialogclosedbyuser",children:[{value:"Defined in",id:"defined-in",children:[],level:4}],level:3},{value:"keyNamespace",id:"keynamespace",children:[{value:"Type declaration",id:"type-declaration",children:[],level:4},{value:"Defined in",id:"defined-in-1",children:[],level:4}],level:3},{value:"const_blockNumberIntervalShort",id:"const_blocknumberintervalshort",children:[{value:"Summary",id:"summary",children:[],level:4},{value:"Defined in",id:"defined-in-2",children:[],level:4}],level:3},{value:"const_blockNumberIntervalMedium",id:"const_blocknumberintervalmedium",children:[{value:"Summary",id:"summary-1",children:[],level:4},{value:"Defined in",id:"defined-in-3",children:[],level:4}],level:3},{value:"const_blockNumberIntervalLong",id:"const_blocknumberintervallong",children:[{value:"Summary",id:"summary-2",children:[],level:4},{value:"Defined in",id:"defined-in-4",children:[],level:4}],level:3}],level:2},{value:"EthersContext Type aliases",id:"etherscontext-type-aliases-1",children:[{value:"TCreateEthersModalConnector",id:"tcreateethersmodalconnector",children:[{value:"Type declaration",id:"type-declaration-1",children:[],level:4},{value:"Summary",id:"summary-3",children:[{value:"\u270f\ufe0f Notes",id:"\ufe0f-notes",children:[],level:5},{value:"Parameters",id:"parameters",children:[],level:5},{value:"Returns",id:"returns",children:[],level:5}],level:4},{value:"Defined in",id:"defined-in-5",children:[],level:4}],level:3}],level:2},{value:"Models Type aliases",id:"models-type-aliases-1",children:[{value:"TDeployedHardhatContractsJson",id:"tdeployedhardhatcontractsjson",children:[{value:"Summary",id:"summary-4",children:[],level:4},{value:"Index signature",id:"index-signature",children:[],level:4},{value:"Defined in",id:"defined-in-6",children:[],level:4}],level:3},{value:"TExternalContractsAddressMap",id:"texternalcontractsaddressmap",children:[{value:"Summary",id:"summary-5",children:[],level:4},{value:"Index signature",id:"index-signature-1",children:[],level:4},{value:"Defined in",id:"defined-in-7",children:[],level:4}],level:3},{value:"TContractFunctionInfo",id:"tcontractfunctioninfo",children:[{value:"Summary",id:"summary-6",children:[],level:4},{value:"Type declaration",id:"type-declaration-2",children:[],level:4},{value:"Defined in",id:"defined-in-8",children:[],level:4}],level:3},{value:"TNetworkInfo",id:"tnetworkinfo",children:[{value:"Summary",id:"summary-7",children:[],level:4},{value:"Type declaration",id:"type-declaration-3",children:[],level:4},{value:"Defined in",id:"defined-in-9",children:[],level:4}],level:3},{value:"TEthersProvider",id:"tethersprovider",children:[{value:"Summary",id:"summary-8",children:[{value:"\u270f\ufe0f Notes",id:"\ufe0f-notes-1",children:[],level:5}],level:4},{value:"Defined in",id:"defined-in-10",children:[],level:4}],level:3},{value:"TEthersProviderOrSigner",id:"tethersproviderorsigner",children:[{value:"Summary",id:"summary-9",children:[],level:4},{value:"Defined in",id:"defined-in-11",children:[],level:4}],level:3},{value:"TEthersSigner",id:"tetherssigner",children:[{value:"Summary",id:"summary-10",children:[],level:4},{value:"Defined in",id:"defined-in-12",children:[],level:4}],level:3},{value:"TAbstractProvider",id:"tabstractprovider",children:[{value:"Summary",id:"summary-11",children:[],level:4},{value:"Defined in",id:"defined-in-13",children:[],level:4}],level:3},{value:"TypedEventFilter",id:"typedeventfilter",children:[{value:"Summary",id:"summary-12",children:[],level:4},{value:"Type parameters",id:"type-parameters",children:[],level:4},{value:"Defined in",id:"defined-in-14",children:[],level:4}],level:3},{value:"TypedEvent",id:"typedevent",children:[{value:"Summary",id:"summary-13",children:[],level:4},{value:"Type parameters",id:"type-parameters-1",children:[],level:4},{value:"Defined in",id:"defined-in-15",children:[],level:4}],level:3},{value:"DeepPartial",id:"deeppartial",children:[{value:"Summary",id:"summary-14",children:[],level:4},{value:"Type parameters",id:"type-parameters-2",children:[],level:4},{value:"Defined in",id:"defined-in-16",children:[],level:4}],level:3}],level:2},{value:"Misc Type aliases",id:"misc-type-aliases-1",children:[{value:"TConnectorConnectorBase",id:"tconnectorconnectorbase",children:[{value:"Summary",id:"summary-15",children:[],level:4},{value:"Type parameters",id:"type-parameters-3",children:[],level:4},{value:"Defined in",id:"defined-in-17",children:[],level:4}],level:3},{value:"TContractConnector",id:"tcontractconnector",children:[{value:"Summary",id:"summary-16",children:[{value:"Notes",id:"notes",children:[],level:5}],level:4},{value:"Type parameters",id:"type-parameters-4",children:[],level:4},{value:"Defined in",id:"defined-in-18",children:[],level:4}],level:3},{value:"TBaseContractExtended",id:"tbasecontractextended",children:[{value:"Type parameters",id:"type-parameters-5",children:[],level:4},{value:"Defined in",id:"defined-in-19",children:[],level:4}],level:3},{value:"TConnectorList",id:"tconnectorlist",children:[{value:"Summary",id:"summary-17",children:[{value:"Notes",id:"notes-1",children:[],level:5}],level:4},{value:"Type parameters",id:"type-parameters-6",children:[],level:4},{value:"Defined in",id:"defined-in-20",children:[],level:4}],level:3},{value:"TTypedContract",id:"ttypedcontract",children:[{value:"Summary",id:"summary-18",children:[{value:"Notes",id:"notes-2",children:[],level:5}],level:4},{value:"Type parameters",id:"type-parameters-7",children:[],level:4},{value:"Defined in",id:"defined-in-21",children:[],level:4}],level:3},{value:"TContractsByName",id:"tcontractsbyname",children:[{value:"Summary",id:"summary-19",children:[{value:"Notes",id:"notes-3",children:[],level:5}],level:4},{value:"Type parameters",id:"type-parameters-8",children:[],level:4},{value:"Defined in",id:"defined-in-22",children:[],level:4}],level:3},{value:"TContractsByChainId",id:"tcontractsbychainid",children:[{value:"Summary",id:"summary-20",children:[{value:"Notes",id:"notes-4",children:[],level:5}],level:4},{value:"Type parameters",id:"type-parameters-9",children:[],level:4},{value:"Defined in",id:"defined-in-23",children:[],level:4}],level:3},{value:"TAppContractsContext",id:"tappcontractscontext",children:[{value:"Type parameters",id:"type-parameters-10",children:[],level:4},{value:"Type declaration",id:"type-declaration-4",children:[],level:4},{value:"Defined in",id:"defined-in-24",children:[],level:4}],level:3},{value:"TBasicContractData",id:"tbasiccontractdata",children:[{value:"Summary",id:"summary-21",children:[],level:4},{value:"Type declaration",id:"type-declaration-5",children:[],level:4},{value:"Defined in",id:"defined-in-25",children:[],level:4}],level:3},{value:"TBasicContractDataConfig",id:"tbasiccontractdataconfig",children:[{value:"Index signature",id:"index-signature-2",children:[],level:4},{value:"Defined in",id:"defined-in-26",children:[],level:4}],level:3},{value:"THardhatContractDataRecord",id:"thardhatcontractdatarecord",children:[{value:"Summary",id:"summary-22",children:[],level:4},{value:"Index signature",id:"index-signature-3",children:[],level:4},{value:"Defined in",id:"defined-in-27",children:[],level:4}],level:3},{value:"TExternalContractDataRecord",id:"texternalcontractdatarecord",children:[{value:"Summary",id:"summary-23",children:[],level:4},{value:"Index signature",id:"index-signature-4",children:[],level:4},{value:"Defined in",id:"defined-in-28",children:[],level:4}],level:3},{value:"TQueryOptions",id:"tqueryoptions",children:[{value:"Type parameters",id:"type-parameters-11",children:[],level:4},{value:"Defined in",id:"defined-in-29",children:[],level:4}],level:3},{value:"TUpdateOptions",id:"tupdateoptions",children:[{value:"Summary",id:"summary-24",children:[{value:"\u270f\ufe0f Notes",id:"\ufe0f-notes-2",children:[],level:5}],level:4},{value:"Type parameters",id:"type-parameters-12",children:[],level:4},{value:"Type declaration",id:"type-declaration-6",children:[],level:4},{value:"Defined in",id:"defined-in-30",children:[],level:4}],level:3},{value:"TOverride",id:"toverride",children:[{value:"Summary",id:"summary-25",children:[{value:"\u270f\ufe0f Notes",id:"\ufe0f-notes-3",children:[],level:5}],level:4},{value:"Type declaration",id:"type-declaration-7",children:[],level:4},{value:"Defined in",id:"defined-in-31",children:[],level:4}],level:3},{value:"THookResult",id:"thookresult",children:[{value:"Summary",id:"summary-26",children:[],level:4},{value:"Type parameters",id:"type-parameters-13",children:[],level:4},{value:"Defined in",id:"defined-in-32",children:[],level:4}],level:3}],level:2},{value:"Type Definition Type aliases",id:"type-definition-type-aliases-1",children:[{value:"TEthersAdaptor",id:"tethersadaptor",children:[{value:"Summary",id:"summary-27",children:[],level:4},{value:"Type declaration",id:"type-declaration-8",children:[],level:4},{value:"Defined in",id:"defined-in-33",children:[],level:4}],level:3}],level:2},{value:"Functions",id:"functions-1",children:[{value:"defaultOverride",id:"defaultoverride",children:[{value:"Returns",id:"returns-1",children:[],level:4},{value:"Defined in",id:"defined-in-34",children:[],level:4}],level:3},{value:"defaultUpdateOptions",id:"defaultupdateoptions",children:[{value:"Type parameters",id:"type-parameters-14",children:[],level:4},{value:"Returns",id:"returns-2",children:[],level:4},{value:"Defined in",id:"defined-in-35",children:[],level:4}],level:3}],level:2}],m={toc:s};function c(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/"},"eth-hooks - v4.0.30")," / Models"),(0,l.kt)("h1",{id:"module-models"},"Module: Models"),(0,l.kt)("p",null,"Types and constants to make it easier to interact with ethers."),(0,l.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,l.kt)("h3",{id:"variables"},"Variables"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#const_web3dialogclosedbyuser"},"const","_","web3DialogClosedByUser")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#keynamespace"},"keyNamespace")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#const_blocknumberintervalshort"},"const","_","blockNumberIntervalShort")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#const_blocknumberintervalmedium"},"const","_","blockNumberIntervalMedium")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#const_blocknumberintervallong"},"const","_","blockNumberIntervalLong"))),(0,l.kt)("h3",{id:"etherscontext-type-aliases"},"EthersContext Type aliases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tcreateethersmodalconnector"},"TCreateEthersModalConnector"))),(0,l.kt)("h3",{id:"models-type-aliases"},"Models Type aliases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tdeployedhardhatcontractsjson"},"TDeployedHardhatContractsJson")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#texternalcontractsaddressmap"},"TExternalContractsAddressMap")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tcontractfunctioninfo"},"TContractFunctionInfo")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tnetworkinfo"},"TNetworkInfo")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tethersprovider"},"TEthersProvider")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tethersproviderorsigner"},"TEthersProviderOrSigner")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tetherssigner"},"TEthersSigner")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tabstractprovider"},"TAbstractProvider")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#typedeventfilter"},"TypedEventFilter")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#typedevent"},"TypedEvent")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#deeppartial"},"DeepPartial"))),(0,l.kt)("h3",{id:"misc-type-aliases"},"Misc Type aliases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tconnectorconnectorbase"},"TConnectorConnectorBase")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tcontractconnector"},"TContractConnector")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tbasecontractextended"},"TBaseContractExtended")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tconnectorlist"},"TConnectorList")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#ttypedcontract"},"TTypedContract")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tcontractsbyname"},"TContractsByName")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tcontractsbychainid"},"TContractsByChainId")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tappcontractscontext"},"TAppContractsContext")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tbasiccontractdata"},"TBasicContractData")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tbasiccontractdataconfig"},"TBasicContractDataConfig")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#thardhatcontractdatarecord"},"THardhatContractDataRecord")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#texternalcontractdatarecord"},"TExternalContractDataRecord")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tqueryoptions"},"TQueryOptions")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tupdateoptions"},"TUpdateOptions")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#toverride"},"TOverride")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#thookresult"},"THookResult"))),(0,l.kt)("h3",{id:"type-definition-type-aliases"},"Type Definition Type aliases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tethersadaptor"},"TEthersAdaptor"))),(0,l.kt)("h3",{id:"etherscontext-interfaces"},"EthersContext Interfaces"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/interfaces/Models.IEthersContext"},"IEthersContext"))),(0,l.kt)("h3",{id:"functions"},"Functions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#defaultoverride"},"defaultOverride")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#defaultupdateoptions"},"defaultUpdateOptions"))),(0,l.kt)("h2",{id:"variables-1"},"Variables"),(0,l.kt)("h3",{id:"const_web3dialogclosedbyuser"},"const","_","web3DialogClosedByUser"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"const","_","web3DialogClosedByUser"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"Modal closed by user"')),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/constants/common.ts#L1"},"src/models/constants/common.ts:1")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"keynamespace"},"keyNamespace"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"keyNamespace"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"network")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},'"network"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signer")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},'"signer"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"contracts")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},'"contracts"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"state")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},'"state"'))))),(0,l.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/constants/keyNamespace.ts#L1"},"src/models/constants/keyNamespace.ts:1")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"const_blocknumberintervalshort"},"const","_","blockNumberIntervalShort"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"const","_","blockNumberIntervalShort"),": ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#deeppartial"},(0,l.kt)("inlineCode",{parentName:"a"},"DeepPartial")),"<",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#tupdateoptions"},(0,l.kt)("inlineCode",{parentName:"a"},"TUpdateOptions")),">"),(0,l.kt)("h4",{id:"summary"},"Summary"),(0,l.kt)("p",null,"An constant for block number interval of 10 blocks"),(0,l.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/hookTypes.ts#L11"},"src/models/hookTypes.ts:11")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"const_blocknumberintervalmedium"},"const","_","blockNumberIntervalMedium"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"const","_","blockNumberIntervalMedium"),": ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#deeppartial"},(0,l.kt)("inlineCode",{parentName:"a"},"DeepPartial")),"<",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#tupdateoptions"},(0,l.kt)("inlineCode",{parentName:"a"},"TUpdateOptions")),">"),(0,l.kt)("h4",{id:"summary-1"},"Summary"),(0,l.kt)("p",null,"An constant for block number interval of 50 blocks"),(0,l.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/hookTypes.ts#L17"},"src/models/hookTypes.ts:17")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"const_blocknumberintervallong"},"const","_","blockNumberIntervalLong"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"const","_","blockNumberIntervalLong"),": ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#deeppartial"},(0,l.kt)("inlineCode",{parentName:"a"},"DeepPartial")),"<",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#tupdateoptions"},(0,l.kt)("inlineCode",{parentName:"a"},"TUpdateOptions")),">"),(0,l.kt)("h4",{id:"summary-2"},"Summary"),(0,l.kt)("p",null,"An constant for block number interval of 250 blocks"),(0,l.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/hookTypes.ts#L23"},"src/models/hookTypes.ts:23")),(0,l.kt)("h2",{id:"etherscontext-type-aliases-1"},"EthersContext Type aliases"),(0,l.kt)("h3",{id:"tcreateethersmodalconnector"},"TCreateEthersModalConnector"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TCreateEthersModalConnector"),": (",(0,l.kt)("inlineCode",{parentName:"p"},"id?"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),") => ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/EthersContext#tethersmodalconnector"},(0,l.kt)("inlineCode",{parentName:"a"},"TEthersModalConnector"))," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")),(0,l.kt)("h4",{id:"type-declaration-1"},"Type declaration"),(0,l.kt)("p",null,"\u25b8 (",(0,l.kt)("inlineCode",{parentName:"p"},"id?"),"): ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/EthersContext#tethersmodalconnector"},(0,l.kt)("inlineCode",{parentName:"a"},"TEthersModalConnector"))," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")),(0,l.kt)("h4",{id:"summary-3"},"Summary"),(0,l.kt)("p",null,"A callback type that returns a EthersModalConnector"),(0,l.kt)("h5",{id:"\ufe0f-notes"},"\u270f\ufe0f Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"can be used by components that need to give a connector to ",(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/interfaces/Models.IEthersContext#openmodal"},"IEthersContext.openModal")),(0,l.kt)("li",{parentName:"ul"},"id is the identifier of the provider:  ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/Web3Modal/web3modal#connect-to-specific-provider"},"See docs"))),(0,l.kt)("h5",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"id?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h5",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/EthersContext#tethersmodalconnector"},(0,l.kt)("inlineCode",{parentName:"a"},"TEthersModalConnector"))," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")),(0,l.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/ethersAppContextTypes.ts#L17"},"src/models/ethersAppContextTypes.ts:17")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"models-type-aliases-1"},"Models Type aliases"),(0,l.kt)("h3",{id:"tdeployedhardhatcontractsjson"},"TDeployedHardhatContractsJson"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TDeployedHardhatContractsJson"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"summary-4"},"Summary"),(0,l.kt)("p",null,"Describes the structure of hardhat_contracts.json"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"{chainIds: { networkNames: {contracts} }}, contains an record of contracts"),(0,l.kt)("li",{parentName:"ul"},"Used by ",(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Hooks#usecontractloader"},"useContractLoader"))),(0,l.kt)("h4",{id:"index-signature"},"Index signature"),(0,l.kt)("p",null,"\u25aa ","[chainId: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"]",": { ","[networkName: string]",": { ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"chainId"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"contracts"),": { ","[contractName: string]",": { ",(0,l.kt)("inlineCode",{parentName:"p"},"address"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"abi?"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"any"),"[]  };  }  };  }"),(0,l.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractTypes.ts#L50"},"src/models/contractTypes.ts:50")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"texternalcontractsaddressmap"},"TExternalContractsAddressMap"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TExternalContractsAddressMap"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("p",null,"{chainId: {contract: address}}, contains an record of contracts"),(0,l.kt)("h4",{id:"summary-5"},"Summary"),(0,l.kt)("p",null,"A type for external contracts"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"it is a record of contract names and their deployed address"),(0,l.kt)("li",{parentName:"ul"},"this data type is used by {@link ContractsAppContext} to connect to external contracts")),(0,l.kt)("h4",{id:"index-signature-1"},"Index signature"),(0,l.kt)("p",null,"\u25aa ","[chainId: ",(0,l.kt)("inlineCode",{parentName:"p"},"number"),"]",": { ","[contractName: string]",": ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),";  }"),(0,l.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractTypes.ts#L74"},"src/models/contractTypes.ts:74")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tcontractfunctioninfo"},"TContractFunctionInfo"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TContractFunctionInfo"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"summary-6"},"Summary"),(0,l.kt)("p",null,"Contract function information:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"contractName"),(0,l.kt)("li",{parentName:"ul"},"functionname"),(0,l.kt)("li",{parentName:"ul"},"functionArgs: functionArguments, an array")),(0,l.kt)("h4",{id:"type-declaration-2"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"contractName")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"functionName")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"functionArgs?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"any"),"[]")))),(0,l.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractTypes.ts#L89"},"src/models/contractTypes.ts:89")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tnetworkinfo"},"TNetworkInfo"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TNetworkInfo"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"summary-7"},"Summary"),(0,l.kt)("p",null,"A type that describes the basics of a network for applications. e.g. mainnet, ropsten, rinkeby, etc."),(0,l.kt)("h4",{id:"type-declaration-3"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"color")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"chainId")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"rpcUrl")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"faucet?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"blockExplorer")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"price?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"gasPrice?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number"))))),(0,l.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/networkTypes.ts#L7"},"src/models/networkTypes.ts:7")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tethersprovider"},"TEthersProvider"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TEthersProvider"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"JsonRpcProvider")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"Web3Provider")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"StaticJsonRpcProvider")),(0,l.kt)("h4",{id:"summary-8"},"Summary"),(0,l.kt)("p",null,"A union of various ethers providers for ease of use and maximum flexiblity"),(0,l.kt)("h5",{id:"\ufe0f-notes-1"},"\u270f\ufe0f Notes"),(0,l.kt)("p",null,"Used by eth-hooks, eth-components and scaffold-eth-typescript"),(0,l.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/providerTypes.ts#L19"},"src/models/providerTypes.ts:19")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tethersproviderorsigner"},"TEthersProviderOrSigner"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TEthersProviderOrSigner"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"JsonRpcProvider")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"Web3Provider")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"StaticJsonRpcProvider")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"Signer")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"JsonRpcSigner")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"Wallet")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"VoidSigner")),(0,l.kt)("h4",{id:"summary-9"},"Summary"),(0,l.kt)("p",null,"A union of various providers and signers in ethers to give maximum flexibility"),(0,l.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/providerTypes.ts#L27"},"src/models/providerTypes.ts:27")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tetherssigner"},"TEthersSigner"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TEthersSigner"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Signer")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"JsonRpcSigner")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"Wallet")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"VoidSigner")),(0,l.kt)("h4",{id:"summary-10"},"Summary"),(0,l.kt)("p",null,"A union of various providers in ethers to give maximum flexibility"),(0,l.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/providerTypes.ts#L42"},"src/models/providerTypes.ts:42")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tabstractprovider"},"TAbstractProvider"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TAbstractProvider"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Provider")),(0,l.kt)("h4",{id:"summary-11"},"Summary"),(0,l.kt)("p",null,"A union of abstract, non initalizable providers, used by some functions"),(0,l.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/providerTypes.ts#L50"},"src/models/providerTypes.ts:50")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"typedeventfilter"},"TypedEventFilter"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TypedEventFilter"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"_EventArgsArray"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"_EventArgsObject"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"EventFilter")),(0,l.kt)("h4",{id:"summary-12"},"Summary"),(0,l.kt)("p",null,"An generic extension of EventFilter that is used by TypedEvent.  It allows for typed events to be returned"),(0,l.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"_EventArgsArray")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),"[]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"_EventArgsObject")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"Record"),"<",(0,l.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"any"),">")))),(0,l.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/providerTypes.ts#L58"},"src/models/providerTypes.ts:58")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"typedevent"},"TypedEvent"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TypedEvent"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"EventArgs"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"Event")," & { ",(0,l.kt)("inlineCode",{parentName:"p"},"args"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"EventArgs"),"  }"),(0,l.kt)("h4",{id:"summary-13"},"Summary"),(0,l.kt)("p",null,"An generic extension of Event.  It types the the arguments and return values of the contract event to be used in typescript."),(0,l.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"EventArgs")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"Result"))))),(0,l.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/providerTypes.ts#L69"},"src/models/providerTypes.ts:69")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"deeppartial"},"DeepPartial"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"DeepPartial"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">",": { ","[P in keyof T]","?: DeepPartial<T","[P]",">"," }"),(0,l.kt)("h4",{id:"summary-14"},"Summary"),(0,l.kt)("p",null,"Similar to ",(0,l.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"},"partial")," int typescript but allows deep partial types."),(0,l.kt)("h4",{id:"type-parameters-2"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T"))))),(0,l.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/utilityTypes.ts#L7"},"src/models/utilityTypes.ts:7")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"misc-type-aliases-1"},"Misc Type aliases"),(0,l.kt)("h3",{id:"tconnectorconnectorbase"},"TConnectorConnectorBase"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TConnectorConnectorBase"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GContract"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly"),"<{ ",(0,l.kt)("inlineCode",{parentName:"p"},"connect"),": (",(0,l.kt)("inlineCode",{parentName:"p"},"address"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"signerOrProvider"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Signer")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"Provider"),") => ",(0,l.kt)("inlineCode",{parentName:"p"},"GContract")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"abi"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"any"),">","[]",">","  }",">"),(0,l.kt)("h4",{id:"summary-15"},"Summary"),(0,l.kt)("p",null,"This types describes a base for a connnector.  A contract connector would be a a conception that is the minimum required to connect to a contract.  It has a connector function that returns a typed contract and abi that has contract information."),(0,l.kt)("h4",{id:"type-parameters-3"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContract")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"BaseContract"))))),(0,l.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractAppContextTypes.ts#L10"},"src/models/contractAppContextTypes.ts:10")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tcontractconnector"},"TContractConnector"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TContractConnector"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GContractNames"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"GContract"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly"),"<{ ",(0,l.kt)("inlineCode",{parentName:"p"},"contractName"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"GContractNames")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"config"),": ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#tbasiccontractdataconfig"},(0,l.kt)("inlineCode",{parentName:"a"},"TBasicContractDataConfig")),"  } & ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#tconnectorconnectorbase"},(0,l.kt)("inlineCode",{parentName:"a"},"TConnectorConnectorBase")),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GContract"),">",">"),(0,l.kt)("h4",{id:"summary-16"},"Summary"),(0,l.kt)("p",null,"This type descripts a connector that has enough information to create a contract in a chain.  The contractName is required to use a group of connectors to create a connection of available contracts for the app."),(0,l.kt)("h5",{id:"notes"},"Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The config would be a record of chain information that helps the factory create contracts for the app."),(0,l.kt)("li",{parentName:"ul"},"based on ",(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tconnectorconnectorbase"},"TConnectorConnectorBase")," and uses ",(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tbasiccontractdataconfig"},"TBasicContractDataConfig"))),(0,l.kt)("h4",{id:"type-parameters-4"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContract")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"BaseContract"))))),(0,l.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractAppContextTypes.ts#L23"},"src/models/contractAppContextTypes.ts:23")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tbasecontractextended"},"TBaseContractExtended"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TBaseContractExtended"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GContractNames"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"BaseContract")," & { ",(0,l.kt)("inlineCode",{parentName:"p"},"contractName"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"GContractNames"),"  }"),(0,l.kt)("h4",{id:"type-parameters-5"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"defined-in-19"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractAppContextTypes.ts#L34"},"src/models/contractAppContextTypes.ts:34")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tconnectorlist"},"TConnectorList"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TConnectorList"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GContractNames"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"GContracts"),">",": { ","[contractName in GContractNames]",": TContractConnector<GContractNames, GContracts",">"," }"),(0,l.kt)("h4",{id:"summary-17"},"Summary"),(0,l.kt)("p",null,"A Record of typed connectors that can be used to create a contract."),(0,l.kt)("h5",{id:"notes-1"},"Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"used by ",(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tappcontractscontext"},"TAppContractsContext"))),(0,l.kt)("h4",{id:"type-parameters-6"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContracts")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tbasecontractextended"},(0,l.kt)("inlineCode",{parentName:"a"},"TBaseContractExtended")),"<",(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames"),">")))),(0,l.kt)("h4",{id:"defined-in-20"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractAppContextTypes.ts#L43"},"src/models/contractAppContextTypes.ts:43")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"ttypedcontract"},"TTypedContract"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TTypedContract"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GContractNames"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"GAppContractConnectorList"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"GAppContractConnectorList")," extends { ","[key in GContractNames]",": Object } ? ",(0,l.kt)("inlineCode",{parentName:"p"},"TypedContract")," : ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#tbasecontractextended"},(0,l.kt)("inlineCode",{parentName:"a"},"TBaseContractExtended")),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GContractNames"),">"),(0,l.kt)("h4",{id:"summary-18"},"Summary"),(0,l.kt)("p",null,"A type that infers contract type ",(0,l.kt)("inlineCode",{parentName:"p"},"(extended from BaseContract)")," based on connectors and contractName.  For example ",(0,l.kt)("inlineCode",{parentName:"p"},"DAI")," from ",(0,l.kt)("inlineCode",{parentName:"p"},"{ DAI: { connect: ... } }"),".  If the contractName is not found, it will return a BaseContract"),(0,l.kt)("h5",{id:"notes-2"},"Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"used by {@link contractContextFactory}")),(0,l.kt)("h4",{id:"type-parameters-7"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GAppContractConnectorList")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GAppContractConnectorList"))))),(0,l.kt)("h4",{id:"defined-in-21"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractAppContextTypes.ts#L54"},"src/models/contractAppContextTypes.ts:54")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tcontractsbyname"},"TContractsByName"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TContractsByName"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GContractNames"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"GContracts"),">",": { ","[contractName in GContractNames]",": { ","[chainId in number]",": GContracts ","|"," undefined } }"),(0,l.kt)("h4",{id:"summary-19"},"Summary"),(0,l.kt)("p",null,"A utility type for typed contracts by name and then by chain"),(0,l.kt)("h5",{id:"notes-3"},"Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"used by ",(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tappcontractscontext"},"TAppContractsContext"))),(0,l.kt)("h4",{id:"type-parameters-8"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContracts")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tbasecontractextended"},(0,l.kt)("inlineCode",{parentName:"a"},"TBaseContractExtended")),"<",(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames"),">")))),(0,l.kt)("h4",{id:"defined-in-22"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractAppContextTypes.ts#L70"},"src/models/contractAppContextTypes.ts:70")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tcontractsbychainid"},"TContractsByChainId"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TContractsByChainId"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GContractNames"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"GContracts"),">",": { ","[chainId in number]",": { ","[contractName in GContractNames]",": GContracts ","|"," undefined } }"),(0,l.kt)("h4",{id:"summary-20"},"Summary"),(0,l.kt)("p",null,"A utility type for typed contracts by chain and then by name"),(0,l.kt)("h5",{id:"notes-4"},"Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"used by ",(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tappcontractscontext"},"TAppContractsContext"))),(0,l.kt)("h4",{id:"type-parameters-9"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContracts")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tbasecontractextended"},(0,l.kt)("inlineCode",{parentName:"a"},"TBaseContractExtended")),"<",(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames"),">")))),(0,l.kt)("h4",{id:"defined-in-23"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractAppContextTypes.ts#L82"},"src/models/contractAppContextTypes.ts:82")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tappcontractscontext"},"TAppContractsContext"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TAppContractsContext"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GContractNames"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"GContracts"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("p",null,"Describes the current ContractsContext for the app used by the context created by {@link contractContextFactory}"),(0,l.kt)("h4",{id:"type-parameters-10"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GContracts")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tbasecontractextended"},(0,l.kt)("inlineCode",{parentName:"a"},"TBaseContractExtended")),"<",(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames"),">")))),(0,l.kt)("h4",{id:"type-declaration-4"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"contractConnectors")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tconnectorlist"},(0,l.kt)("inlineCode",{parentName:"a"},"TConnectorList")),"<",(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"GContracts"),">")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"contractsByName")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tcontractsbyname"},(0,l.kt)("inlineCode",{parentName:"a"},"TContractsByName")),"<",(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"GContracts"),">")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"contractsByChainId")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tcontractsbychainid"},(0,l.kt)("inlineCode",{parentName:"a"},"TContractsByChainId")),"<",(0,l.kt)("inlineCode",{parentName:"td"},"GContractNames"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"GContracts"),">")))),(0,l.kt)("h4",{id:"defined-in-24"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractAppContextTypes.ts#L94"},"src/models/contractAppContextTypes.ts:94")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tbasiccontractdata"},"TBasicContractData"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TBasicContractData"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"summary-21"},"Summary"),(0,l.kt)("p",null,"Describes the sctructure of each contract in hardhat_contracts.json"),(0,l.kt)("h4",{id:"type-declaration-5"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"address")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"abi?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"any"),"[]")))),(0,l.kt)("h4",{id:"defined-in-25"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractTypes.ts#L5"},"src/models/contractTypes.ts:5")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tbasiccontractdataconfig"},"TBasicContractDataConfig"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TBasicContractDataConfig"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"index-signature-2"},"Index signature"),(0,l.kt)("p",null,"\u25aa ","[chainId: ",(0,l.kt)("inlineCode",{parentName:"p"},"number"),"]",": { ",(0,l.kt)("inlineCode",{parentName:"p"},"chainId"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"number")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"address"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"  }"),(0,l.kt)("h4",{id:"defined-in-26"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractTypes.ts#L10"},"src/models/contractTypes.ts:10")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"thardhatcontractdatarecord"},"THardhatContractDataRecord"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"THardhatContractDataRecord"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"summary-22"},"Summary"),(0,l.kt)("p",null,"Contracts by contract name"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A record of contract names and their hardhat contract json"),(0,l.kt)("li",{parentName:"ul"},"includes chain id")),(0,l.kt)("h4",{id:"index-signature-3"},"Index signature"),(0,l.kt)("p",null,"\u25aa ","[contractName: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"]",": { ",(0,l.kt)("inlineCode",{parentName:"p"},"config"),": ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#tbasiccontractdataconfig"},(0,l.kt)("inlineCode",{parentName:"a"},"TBasicContractDataConfig"))," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"abi"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"any"),"[]  }"),(0,l.kt)("h4",{id:"defined-in-27"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractTypes.ts#L23"},"src/models/contractTypes.ts:23")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"texternalcontractdatarecord"},"TExternalContractDataRecord"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TExternalContractDataRecord"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"summary-23"},"Summary"),(0,l.kt)("p",null,"Contracts by contract name"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A record of contract names and their hardhat contract json"),(0,l.kt)("li",{parentName:"ul"},"includes chain id")),(0,l.kt)("h4",{id:"index-signature-4"},"Index signature"),(0,l.kt)("p",null,"\u25aa ","[contractName: ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"]",": { ",(0,l.kt)("inlineCode",{parentName:"p"},"config"),": ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#tbasiccontractdataconfig"},(0,l.kt)("inlineCode",{parentName:"a"},"TBasicContractDataConfig")),"  }"),(0,l.kt)("h4",{id:"defined-in-28"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/contractTypes.ts#L36"},"src/models/contractTypes.ts:36")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tqueryoptions"},"TQueryOptions"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TQueryOptions"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GResult"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"Omit"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"QueryObserverOptions"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GResult"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"any"),">",", ",(0,l.kt)("inlineCode",{parentName:"p"},'"refetchInterval"')," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},'"notifyOnChangeProps"')," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},'"notifyOnChangePropsExclusions"')," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},'"select"'),">"),(0,l.kt)("h4",{id:"type-parameters-11"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GResult"))))),(0,l.kt)("h4",{id:"defined-in-29"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/hookTypes.ts#L25"},"src/models/hookTypes.ts:25")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tupdateoptions"},"TUpdateOptions"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TUpdateOptions"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GResult"),">",": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"summary-24"},"Summary"),(0,l.kt)("p",null,"Options for hooks that describe the behviour of updates.\nBy default, depending on the hook, it will update every block."),(0,l.kt)("h5",{id:"\ufe0f-notes-2"},"\u270f\ufe0f Notes"),(0,l.kt)("p",null,"The following options are available:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"interval: interval in blocknumber to update in (default 1) see {@link TUpdateOptions.blockNumberInterval}"),(0,l.kt)("li",{parentName:"ul"},"polling: in ms, should be over 10000ms.  This is set by {@link TUpdateOptions.query.refetchInterval}")),(0,l.kt)("h4",{id:"type-parameters-12"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GResult")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"any"))))),(0,l.kt)("h4",{id:"type-declaration-6"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"blockNumberInterval")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The interval in blocknumber for the hook to update in (default 1)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"refetchInterval?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"query?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tqueryoptions"},(0,l.kt)("inlineCode",{parentName:"a"},"TQueryOptions")),"<",(0,l.kt)("inlineCode",{parentName:"td"},"GResult"),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,l.kt)("h4",{id:"defined-in-30"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/hookTypes.ts#L40"},"src/models/hookTypes.ts:40")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"toverride"},"TOverride"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TOverride"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"summary-25"},"Summary"),(0,l.kt)("p",null,"Ethers Provider options.  By default, the context provider is used by the hook.  If you want to use a different provider, you can:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"pass in an ",(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/Models#tethersadaptor"},"TEthersAdaptor")," to override the provider"),(0,l.kt)("li",{parentName:"ul"},"give the alternateContextKey for a secondary context provider.")),(0,l.kt)("h5",{id:"\ufe0f-notes-3"},"\u270f\ufe0f Notes"),(0,l.kt)("p",null,"Adaptor"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To create a adaptor from a provider/signer see {@link useGetEthersAdaptorFromSignerOrProvider}"),(0,l.kt)("li",{parentName:"ul"},"You need to set adaptorEnabled to true")),(0,l.kt)("p",null,"Alternate Context Key"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For more info on alternateContextKey, see ",(0,l.kt)("a",{parentName:"li",href:"/eth-hooks/docs/api/modules/EthersContext#tethersappcontextprops"},"TEthersAppContextProps")," and ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/NoahZinsmeister/web3-react/tree/v6/docs#createweb3reactroot"},"web3-react docs"),".")),(0,l.kt)("h4",{id:"type-declaration-7"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"adaptorEnabled")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"An enable override adaptor (ethers provider) for this hook")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"adaptor")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tethersadaptor"},(0,l.kt)("inlineCode",{parentName:"a"},"TEthersAdaptor"))," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The alternate adaptor to use.  See ",(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tethersadaptor"},"TEthersAdaptor"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"alternateContextKey?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The alternate context key to use.  See ",(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/EthersContext#tethersappcontextprops"},"TEthersAppContextProps"))))),(0,l.kt)("h4",{id:"defined-in-31"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/hookTypes.ts#L63"},"src/models/hookTypes.ts:63")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"thookresult"},"THookResult"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"THookResult"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">",": ","[result: T, update: Function, status: QueryStatus]"),(0,l.kt)("h4",{id:"summary-26"},"Summary"),(0,l.kt)("p",null,"This type describes the tuple that is returned by most hooks"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"result: the result of the hook"),(0,l.kt)("li",{parentName:"ol"},"update: a callback will refresh the results of hook manually"),(0,l.kt)("li",{parentName:"ol"},"status: the status of the query.  From react-query: 'idle' | 'loading' | 'error' | 'success'. You can use this for UX purposes, see {@link QueryStatus}.")),(0,l.kt)("h4",{id:"type-parameters-13"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T"))))),(0,l.kt)("h4",{id:"defined-in-32"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/hookTypes.ts#L114"},"src/models/hookTypes.ts:114")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"type-definition-type-aliases-1"},"Type Definition Type aliases"),(0,l.kt)("h3",{id:"tethersadaptor"},"TEthersAdaptor"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"TEthersAdaptor"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Object")),(0,l.kt)("h4",{id:"summary-27"},"Summary"),(0,l.kt)("p",null,"Essentially a object that allows interaction with the network:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"provider signer,")),(0,l.kt)("h4",{id:"type-declaration-8"},"Type declaration"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signer?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tetherssigner"},(0,l.kt)("inlineCode",{parentName:"a"},"TEthersSigner")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"provider?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/eth-hooks/docs/api/modules/Models#tethersprovider"},(0,l.kt)("inlineCode",{parentName:"a"},"TEthersProvider")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"chainId?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"account?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"defined-in-33"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/ethersAppContextTypes.ts#L49"},"src/models/ethersAppContextTypes.ts:49")),(0,l.kt)("h2",{id:"functions-1"},"Functions"),(0,l.kt)("h3",{id:"defaultoverride"},"defaultOverride"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,l.kt)("strong",{parentName:"p"},"defaultOverride"),"(): ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#toverride"},(0,l.kt)("inlineCode",{parentName:"a"},"TOverride"))),(0,l.kt)("p",null,"An helper to create the default override settings for hooks"),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#toverride"},(0,l.kt)("inlineCode",{parentName:"a"},"TOverride"))),(0,l.kt)("h4",{id:"defined-in-34"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/hookTypes.ts#L83"},"src/models/hookTypes.ts:83")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"defaultupdateoptions"},"defaultUpdateOptions"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,l.kt)("strong",{parentName:"p"},"defaultUpdateOptions"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GResult"),">","(): ",(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#tupdateoptions"},(0,l.kt)("inlineCode",{parentName:"a"},"TUpdateOptions")),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GResult"),">"),(0,l.kt)("p",null,"A helper to create default update options for hooks"),(0,l.kt)("h4",{id:"type-parameters-14"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"GResult")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"any"))))),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/eth-hooks/docs/api/modules/Models#tupdateoptions"},(0,l.kt)("inlineCode",{parentName:"a"},"TUpdateOptions")),"<",(0,l.kt)("inlineCode",{parentName:"p"},"GResult"),">"),(0,l.kt)("h4",{id:"defined-in-35"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/eth-hooks/blob/f69d7cc/src/models/hookTypes.ts#L95"},"src/models/hookTypes.ts:95")))}c.isMDXComponent=!0}}]);